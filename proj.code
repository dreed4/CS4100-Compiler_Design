<define PARSE CODE.Program/>

<define TOKEN ((":" ":") ("<" "=") (">" "=") (":" "="))/>

<define KEYWORDS ("hd" | "tl" | "ref" | "not" | "and" | "or" | "while" | "do" | "let" | "in" | "end" | "if" | "then" | "else" | "val" | "int" | "real" | "unit" | "bool" | "list")/>

<* enumeration of different types *>
<code IntType match=CODE.Type/>
<code FloatType match=CODE.Type/>
<code TypeList#TypeNull match=CODE.Type/>

<code TypeError match=CODE.Type/>


<code Program
    parse = LIST((CODE.Expression ";"), "\n")
/>

<code Expression
    parse =
        (   ("(" CODE.Sequence ")")
        |   CODE.IfThenElse
        )
/>

<code Sequence
    parse = (CODE.Expression CODE.Sequence2)
/>

<code Sequence2
    parse =
        (   (";" CODE.Expression CODE.Sequence2)
        |   ""
        )
/>

<code IfThenElse
    parse =
        (   ("if" CODE.Sequential "then" CODE.Expression "else" CODE.Expression)
        |   CODE.LetIn
        )
/>

<code LetIn
    parse =
        (   ("let" CODE.Definitions "in" CODE.Sequence "end")
        |   CODE.While
        )
/>

<code Definitions
    parse = (CODE.Definition CODE.Definitions2)
/>

<code Definitions2
    parse =
        (   (";" CODE.Definition CODE.Definitions2)
        |   ""
        )
/>

<code While
    parse =
        (   ("while" CODE.Sequential "do" CODE.Expression)
        |   CODE.Definition
        |   (CODE.Sequential CODE.Assignment)
        )
/>

<code Definition
    parse = ("val" ID ":" CODE.Type "=" CODE.Expression)
/>

<code Type
    parse = (CODE.Primitive CODE.Type2)
/>

<code Type2
    parse =
        (   ("ref" CODE.Type2)
        |   ("list" CODE.Type2)
        |   ""
        )
/>

<code Primitive
    parse =
        (   "int"
        |   "real"
        |   "unit"
        |   "bool"
        )
/>

<code Assignment
    parse =
        (   (":=" CODE.Expression)
        |   ""
        )
/>

<code Sequential
    parse = (CODE.Conditional CODE.Sequential2)
/>

<code Sequential2
    parse =
        (   ("," CODE.Conditional CODE.Sequential2)
        |   ""
        )
/>

<code Conditional
    parse = (CODE.Relational CODE.Conditional2)
/>

<code Conditional2
    parse =
        (   ("and" CODE.Relational CODE.Conditional2)
        |   ("or" CODE.Relational CODE.Conditional2)
        |   ""
        )
/>

<code Relational
    parse = (CODE.Additive CODE.Relational2)
/>

<code Relational2
   parse =
       (   ("<" CODE.Additive CODE.Relational2)
       |   (">" CODE.Additive CODE.Relational2)
       |   ("=" CODE.Additive CODE.Relational2)
       |   ("<=" CODE.Additive CODE.Relational2)
       |   (">=" CODE.Additive CODE.Relational2)
       |   ""
       )
/>

<code Additive
    parse = (CODE.Multiplicative CODE.Additive2)
/>

<code Additive2
    parse =
        (   ("+" CODE.Multiplicative CODE.Additive2)
        |   ("-" CODE.Multiplicative CODE.Additive2)
        |   ""
        )
/>

<code Multiplicative
    parse = (CODE.Constructive CODE.Multiplicative2)
/>

<code Multiplicative2
    parse =
        (   ("*" CODE.Constructive CODE.Multiplicative2)
        |   ("/" CODE.Constructive CODE.Multiplicative2)
        |   ""
        )
/>

<code Constructive
    parse = (CODE.Unary CODE.Constructive2)
/>

<code Constructive2
    parse =
        (   ("::" CODE.Unary CODE.Constructive2)
        |   ""
        )
/>

<code Unary
    parse =
        (   ("-" CODE.Unary)
        |   ("hd" CODE.Unary)
        |   ("tl" CODE.Unary)
        |   ("ref" CODE.Unary)
        |   ("!" CODE.Unary)
        |   ("not" CODE.Unary)
        |   CODE.Primary
        )
/>



<* old *>
<************************************
<code Primary
    parse =
        (   INT 
        |   FLOAT
        |   ID
        |   ("[" CODE.List)
        |   ("(" CODE.Sequential ")")
        )
/>
*************************************>

<*new Primary *>
<code Primary
	parse =
		( (INT eval(return IntType))
		| (FLOAT eval(return FloatType))
		<* this works but it prings quotation marks aroudn the id? Don't
			 know what's up with that, will fix later*>
		| (id=ID eval(print("Line " LINE_NO ": Undefined variable:" id);))
		| ("[" CODE.List)
		| ("(" CODE.Sequential ")")
		)
/>


<code List
    parse =
        (   ("]" eval(return TypeList#TypeNull))
        |   (CODE.Sequential "]")
        )
/>
